diff --git a/node_modules/ftpd/lib/FtpConnection.js b/node_modules/ftpd/lib/FtpConnection.js
index 828e1a8..8d99622 100644
--- a/node_modules/ftpd/lib/FtpConnection.js
+++ b/node_modules/ftpd/lib/FtpConnection.js
@@ -7,6 +7,7 @@ var pathModule = require('path');
 var fsModule = require('fs');
 var StatMode = require('stat-mode');
 var dateformat = require('dateformat');
+const { Readable } = require('stream')
 
 var glob = require('./glob');
 var starttls = require('./starttls');
@@ -17,6 +18,7 @@ var pathEscape = require('./helpers/pathEscape');
 var withCwd = require('./helpers/withCwd');
 var stripOptions = require('./helpers/stripOptions');
 var leftPad = require('./helpers/leftPad');
+const FileModel = require('../../../models/File');
 
 var EventEmitter = events.EventEmitter;
 
@@ -28,25 +30,25 @@ var REQUIRES_CONFIGURED_DATA = Constants.REQUIRES_CONFIGURED_DATA;
 function FtpConnection(properties) {
   EventEmitter.call(this);
   var self = this;
-  Object.keys(properties).forEach(function(key) {
+  Object.keys(properties).forEach(function (key) {
     self[key] = properties[key];
   });
 }
 util.inherits(FtpConnection, EventEmitter);
 
 // TODO: rename this to writeLine?
-FtpConnection.prototype.respond = function(message, callback) {
+FtpConnection.prototype.respond = function (message, callback) {
   return this._writeText(this.socket, message + '\r\n', callback);
 };
 
-FtpConnection.prototype._logIf = function(verbosity, message) {
+FtpConnection.prototype._logIf = function (verbosity, message) {
   return this.server._logIf(verbosity, message, this);
 };
 
 // We don't want to use setEncoding because it screws up TLS, but we
 // also don't want to explicitly specify ASCII encoding for every call to 'write'
 // with a string argument.
-FtpConnection.prototype._writeText = function(socket, data, callback) {
+FtpConnection.prototype._writeText = function (socket, data, callback) {
   if (!socket || !socket.writable) {
     this._logIf(LOG.DEBUG, 'Attempted writing to a closed socket:\n>> ' + data.trim());
     return;
@@ -55,11 +57,11 @@ FtpConnection.prototype._writeText = function(socket, data, callback) {
   return socket.write(data, 'utf8', callback);
 };
 
-FtpConnection.prototype._authenticated = function() {
+FtpConnection.prototype._authenticated = function () {
   return !!this.username;
 };
 
-FtpConnection.prototype._closeDataConnections = function() {
+FtpConnection.prototype._closeDataConnections = function () {
   if (this.dataSocket) {
     // TODO: should the second arg be false here?
     this._closeSocket(this.dataSocket, true);
@@ -71,17 +73,17 @@ FtpConnection.prototype._closeDataConnections = function() {
   }
 };
 
-FtpConnection.prototype._createPassiveServer = function() {
+FtpConnection.prototype._createPassiveServer = function () {
   var self = this;
 
-  return net.createServer(function(psocket) {
+  return net.createServer(function (psocket) {
     // This is simply a connection listener.
     // TODO: Should we keep track of *all* connections, or enforce just one?
     self._logIf(LOG.INFO, 'Passive data event: connect');
 
     if (self.secure) {
       self._logIf(LOG.INFO, 'Upgrading passive connection to TLS');
-      starttls.starttlsServer(psocket, self.server.options.tlsOptions, function(err, cleartext) {
+      starttls.starttlsServer(psocket, self.server.options.tlsOptions, function (err, cleartext) {
         if (err) {
           self._logIf(LOG.ERROR, 'Error upgrading passive connection to TLS:' + util.inspect(err));
           self._closeSocket(psocket, true);
@@ -125,16 +127,16 @@ FtpConnection.prototype._createPassiveServer = function() {
       self.dataSocket.on('close', allOver('close'));
       self.dataSocket.on('end', allOver('end'));
       function allOver(ename) {
-        return function(err) {
+        return function (err) {
           self._logIf(
-              (err ? LOG.ERROR : LOG.DEBUG),
-              'Passive data event: ' + ename + (err ? ' due to error' : '')
+            (err ? LOG.ERROR : LOG.DEBUG),
+            'Passive data event: ' + ename + (err ? ' due to error' : '')
           );
           self.dataSocket = null;
         };
       }
 
-      self.dataSocket.on('error', function(err) {
+      self.dataSocket.on('error', function (err) {
         self._logIf(LOG.ERROR, 'Passive data event: error: ' + err);
         // TODO: Can we can rely on self.dataSocket having been closed?
         self.dataSocket = null;
@@ -144,7 +146,7 @@ FtpConnection.prototype._createPassiveServer = function() {
   });
 };
 
-FtpConnection.prototype._whenDataReady = function(callback) {
+FtpConnection.prototype._whenDataReady = function (callback) {
   var self = this;
 
   if (self.dataListener) {
@@ -155,7 +157,7 @@ FtpConnection.prototype._whenDataReady = function(callback) {
       callback(self.dataSocket);
     } else {
       self._logIf(LOG.DEBUG, 'Currently no data connection; expecting client to connect to pasv server shortly...');
-      self.dataListener.once('ready', function() {
+      self.dataListener.once('ready', function () {
         self._logIf(LOG.DEBUG, '...client has connected now');
         callback(self.dataSocket);
       });
@@ -166,14 +168,14 @@ FtpConnection.prototype._whenDataReady = function(callback) {
       self._logIf(LOG.DEBUG, 'Using existing non-passive dataSocket');
       callback(self.dataSocket);
     } else {
-      self._initiateData(function(sock) {
+      self._initiateData(function (sock) {
         callback(sock);
       });
     }
   }
 };
 
-FtpConnection.prototype._initiateData = function(callback) {
+FtpConnection.prototype._initiateData = function (callback) {
   var self = this;
 
   if (self.dataSocket) {
@@ -181,7 +183,7 @@ FtpConnection.prototype._initiateData = function(callback) {
   }
 
   var sock = net.connect(self.dataPort, self.dataHost || self.socket.remoteAddress);
-  sock.on('connect', function() {
+  sock.on('connect', function () {
     self.dataSocket = sock;
     callback(sock);
   });
@@ -195,7 +197,7 @@ FtpConnection.prototype._initiateData = function(callback) {
     );
   }
 
-  sock.on('error', function(err) {
+  sock.on('error', function (err) {
     self._closeSocket(sock, true);
     self._logIf(LOG.ERROR, 'Data connection error: ' + util.inspect(err));
     self.dataSocket = null;
@@ -203,16 +205,16 @@ FtpConnection.prototype._initiateData = function(callback) {
   });
 };
 
-FtpConnection.prototype._onError = function(err) {
+FtpConnection.prototype._onError = function (err) {
   this._logIf(LOG.ERROR, 'Client connection error: ' + util.inspect(err));
   this._closeSocket(this.socket, true);
 };
 
-FtpConnection.prototype._onEnd = function() {
+FtpConnection.prototype._onEnd = function () {
   this._logIf(LOG.DEBUG, 'Client connection ended');
 };
 
-FtpConnection.prototype._onClose = function(hadError) {
+FtpConnection.prototype._onClose = function (hadError) {
   // I feel like some of this might be redundant since we probably close some
   // of these sockets elsewhere, but it is fine to call _closeSocket more than
   // once.
@@ -232,7 +234,7 @@ FtpConnection.prototype._onClose = function(hadError) {
   this._logIf(LOG.INFO, 'Client connection closed');
 };
 
-FtpConnection.prototype._onData = function(data) {
+FtpConnection.prototype._onData = function (data) {
   var self = this;
 
   if (self.hasQuit) {
@@ -291,27 +293,27 @@ FtpConnection.prototype._onData = function(data) {
 };
 
 // Specify the user's account (superfluous)
-FtpConnection.prototype._command_ACCT = function() {
+FtpConnection.prototype._command_ACCT = function () {
   this.respond('202 Command not implemented, superfluous at this site.');
   return this;
 };
 
 // Allocate storage space (superfluous)
-FtpConnection.prototype._command_ALLO = function() {
+FtpConnection.prototype._command_ALLO = function () {
   this.respond('202 Command not implemented, superfluous at this site.');
   return this;
 };
 
-FtpConnection.prototype._command_AUTH = function(commandArg) {
+FtpConnection.prototype._command_AUTH = function (commandArg) {
   var self = this;
 
   if (!self.server.options.tlsOptions || commandArg !== 'TLS') {
     return self.respond('502 Command not implemented');
   }
 
-  self.respond('234 Honored', function() {
+  self.respond('234 Honored', function () {
     self._logIf(LOG.INFO, 'Establishing secure connection...');
-    starttls.starttlsServer(self.socket, self.server.options.tlsOptions, function(err, cleartext) {
+    starttls.starttlsServer(self.socket, self.server.options.tlsOptions, function (err, cleartext) {
       if (err) {
         self._logIf(LOG.ERROR, 'Error upgrading connection to TLS: ' + util.inspect(err));
         self._closeSocket(self.socket, true);
@@ -331,7 +333,7 @@ FtpConnection.prototype._command_AUTH = function(commandArg) {
       function switchToSecure() {
         self._logIf(LOG.INFO, 'Secure connection started');
         self.socket = cleartext;
-        self.socket.on('data', function(data) {
+        self.socket.on('data', function (data) {
           self._onData(data);
         });
         self.secure = true;
@@ -341,7 +343,7 @@ FtpConnection.prototype._command_AUTH = function(commandArg) {
 };
 
 // Change working directory to parent directory
-FtpConnection.prototype._command_CDUP = function() {
+FtpConnection.prototype._command_CDUP = function () {
   var pathServer = pathModule.dirname(this.cwd);
   var pathEscaped = pathEscape(pathServer);
   this.cwd = pathServer;
@@ -350,11 +352,11 @@ FtpConnection.prototype._command_CDUP = function() {
 };
 
 // Change working directory
-FtpConnection.prototype._command_CWD = function(pathRequest) {
+FtpConnection.prototype._command_CWD = function (pathRequest) {
   var pathServer = withCwd(this.cwd, pathRequest);
   var pathFs = pathModule.join(this.root, pathServer);
   var pathEscaped = pathEscape(pathServer);
-  this.fs.stat(pathFs, function(err, stats) {
+  this.fs.stat(pathFs, function (err, stats) {
     if (err) {
       this._logIf(LOG.ERROR, 'CWD ' + pathRequest + ': ' + err);
       this.respond('550 Directory not found.');
@@ -369,11 +371,11 @@ FtpConnection.prototype._command_CWD = function(pathRequest) {
   return this;
 };
 
-FtpConnection.prototype._command_DELE = function(commandArg) {
+FtpConnection.prototype._command_DELE = function (commandArg) {
   var self = this;
 
   var filename = withCwd(self.cwd, commandArg);
-  self.fs.unlink(pathModule.join(self.root, filename), function(err) {
+  self.fs.unlink(pathModule.join(self.root, filename), function (err) {
     if (err) {
       self._logIf(LOG.ERROR, 'Error deleting file: ' + filename + ', ' + err);
       // write error to socket
@@ -384,24 +386,24 @@ FtpConnection.prototype._command_DELE = function(commandArg) {
   });
 };
 
-FtpConnection.prototype._command_FEAT = function() {
+FtpConnection.prototype._command_FEAT = function () {
   // Get the feature list implemented by the server. (RFC 2389)
   this.respond(
-      '211-Features\r\n' +
-          ' SIZE\r\n' +
-          ' UTF8\r\n' +
-          ' MDTM\r\n' +
-          (!this.server.options.tlsOptions ? '' :
-              ' AUTH TLS\r\n' +
-                  ' PBSZ\r\n' +
-                  ' UTF8\r\n' +
-                  ' PROT\r\n'
-              ) +
-          '211 end'
+    '211-Features\r\n' +
+    ' SIZE\r\n' +
+    ' UTF8\r\n' +
+    ' MDTM\r\n' +
+    (!this.server.options.tlsOptions ? '' :
+      ' AUTH TLS\r\n' +
+      ' PBSZ\r\n' +
+      ' UTF8\r\n' +
+      ' PROT\r\n'
+    ) +
+    '211 end'
   );
 };
 
-FtpConnection.prototype._command_OPTS = function(commandArg) {
+FtpConnection.prototype._command_OPTS = function (commandArg) {
   // http://tools.ietf.org/html/rfc2389#section-4
   if (commandArg.toUpperCase() === 'UTF8 ON') {
     this.respond('200 OK');
@@ -411,10 +413,10 @@ FtpConnection.prototype._command_OPTS = function(commandArg) {
 };
 
 // Print the file modification time
-FtpConnection.prototype._command_MDTM = function(file) {
+FtpConnection.prototype._command_MDTM = function (file) {
   file = withCwd(this.cwd, file);
   file = pathModule.join(this.root, file);
-  this.fs.stat(file, function(err, stats) {
+  this.fs.stat(file, function (err, stats) {
     if (err) {
       this.respond('550 File unavailable');
     } else {
@@ -424,15 +426,15 @@ FtpConnection.prototype._command_MDTM = function(file) {
   return this;
 };
 
-FtpConnection.prototype._command_LIST = function(commandArg) {
+FtpConnection.prototype._command_LIST = function (commandArg) {
   this._LIST(commandArg, true/*detailed*/, 'LIST');
 };
 
-FtpConnection.prototype._command_NLST = function(commandArg) {
+FtpConnection.prototype._command_NLST = function (commandArg) {
   this._LIST(commandArg, false/*!detailed*/, 'NLST');
 };
 
-FtpConnection.prototype._command_STAT = function(commandArg) {
+FtpConnection.prototype._command_STAT = function (commandArg) {
   if (commandArg) {
     this._LIST(commandArg, true/*detailed*/, 'STAT');
   } else {
@@ -440,7 +442,7 @@ FtpConnection.prototype._command_STAT = function(commandArg) {
   }
 };
 
-FtpConnection.prototype._LIST = function(commandArg, detailed, cmd) {
+FtpConnection.prototype._LIST = function (commandArg, detailed, cmd) {
   /*
    Normally the server responds with a mark using code 150. It then stops accepting new connections, attempts to send the contents of the directory over the data connection, and closes the data connection. Finally it
 
@@ -460,15 +462,14 @@ FtpConnection.prototype._LIST = function(commandArg, detailed, cmd) {
   var dir = withCwd(self.cwd, dirname);
 
   glob.setMaxStatsAtOnce(self.server.options.maxStatsAtOnce);
-  glob.glob(pathModule.join(self.root, dir), self.fs, function(err, files) {
+  glob.mongoglob(pathModule.join(self.root, dir), self.fs, function (err, files) {
     if (err) {
       self._logIf(LOG.ERROR, 'Error sending file list, reading directory: ' + err);
       self.respond('550 Not a directory');
       return;
     }
-
     if (self.server.options.hideDotFiles) {
-      files = files.filter(function(file) {
+      files = files.filter(function (file) {
         if (file.name && file.name[0] !== '.') {
           return true;
         }
@@ -504,8 +505,8 @@ FtpConnection.prototype._LIST = function(commandArg, detailed, cmd) {
         return i === files.length + j ? finished() : null;
       }
 
-      self.server.getUsernameFromUid(files[ii].stats.uid, function(e1, uname) {
-        self.server.getGroupFromGid(files[ii].stats.gid, function(e2, gname) {
+      self.server.getUsernameFromUid(files[ii].stats.uid, function (e1, uname) {
+        self.server.getGroupFromGid(files[ii].stats.gid, function (e2, gname) {
           if (e1 || e2) {
             self._logIf(LOG.WARN, 'Error getting user/group name for file: ' + util.inspect(e1 || e2));
             fileInfos.push({
@@ -531,7 +532,7 @@ FtpConnection.prototype._LIST = function(commandArg, detailed, cmd) {
         if (self.server.options.filenameSortMap !== false) {
           var sm = (
             self.server.options.filenameSortMap ||
-            function(x) {
+            function (x) {
               return x.toUpperCase();
             }
           );
@@ -541,10 +542,10 @@ FtpConnection.prototype._LIST = function(commandArg, detailed, cmd) {
         }
 
         var sf = (self.server.options.filenameSortFunc ||
-            function(x, y) {
-              return x.localeCompare(y);
-            });
-        fileInfos = fileInfos.sort(function(x, y) {
+          function (x, y) {
+            return x.localeCompare(y);
+          });
+        fileInfos = fileInfos.sort(function (x, y) {
           if (self.server.options.filenameSortMap !== false) {
             return sf(x._s, y._s);
           } else if (detailed) {
@@ -560,7 +561,7 @@ FtpConnection.prototype._LIST = function(commandArg, detailed, cmd) {
   }, self.server.options.noWildcards);
 };
 
-FtpConnection.prototype._listFiles = function(fileInfos, detailed, cmd) {
+FtpConnection.prototype._listFiles = function (fileInfos, detailed, cmd) {
   var self = this;
 
   var m = '150 Here comes the directory listing';
@@ -572,7 +573,7 @@ FtpConnection.prototype._listFiles = function(fileInfos, detailed, cmd) {
     LIST: m, NLST: m, STAT: '213 End of status',
   };
 
-  self.respond(BEGIN_MSGS[cmd], function() {
+  self.respond(BEGIN_MSGS[cmd], function () {
     if (cmd === 'STAT') {
       whenReady(self.socket);
     } else {
@@ -596,7 +597,6 @@ FtpConnection.prototype._listFiles = function(fileInfos, detailed, cmd) {
       }
 
       self._logIf(LOG.DEBUG, 'Sending file list');
-
       for (var i = 0; i < fileInfos.length; ++i) {
         var fileInfo = fileInfos[i];
 
@@ -609,15 +609,18 @@ FtpConnection.prototype._listFiles = function(fileInfos, detailed, cmd) {
         } else {
           file = fileInfo.file;
           var s = file.stats;
-          var allModes = (new StatMode({mode: s.mode})).toString();
+          var allModes = (new StatMode({ mode: s.mode })).toString();
           var rwxModes = allModes.substr(1, 9);
-          line += (s.isDirectory() ? 'd' : '-') + rwxModes;
+          // line += (s.isDirectory() ? 'd' : '-') + rwxModes;
+          line += (false ? 'd' : '-') + rwxModes;
+          // -rw-rw-rw-で統一する
           // ^-- Clients don't need to know about special files and pipes
           line += ' 1 ' +
             (fileInfo.uname || 'ftp') + ' ' +
             (fileInfo.gname === null ? 'ftp' : fileInfo.gname) + ' ';
           line += leftPad(s.size.toString(), 12) + ' ';
           var d = new Date(s.mtime);
+          // d = uploaddate
           line += leftPad(dateformat(d, 'mmm dd HH:MM'), 12) + ' ';
           line += file.name;
           line += '\r\n';
@@ -627,17 +630,18 @@ FtpConnection.prototype._listFiles = function(fileInfos, detailed, cmd) {
           line,
           (i === fileInfos.length - 1 ? success : undefined)
         );
+
       }
     }
   });
 };
 
 // Create a directory
-FtpConnection.prototype._command_MKD = function(pathRequest) {
+FtpConnection.prototype._command_MKD = function (pathRequest) {
   var pathServer = withCwd(this.cwd, pathRequest);
   var pathEscaped = pathEscape(pathServer);
   var pathFs = pathModule.join(this.root, pathServer);
-  this.fs.mkdir(pathFs, 0755, function(err) {
+  this.fs.mkdir(pathFs, 0755, function (err) {
     if (err) {
       this._logIf(LOG.ERROR, 'MKD ' + pathRequest + ': ' + err);
       this.respond('550 "' + pathEscaped + '" directory NOT created');
@@ -649,20 +653,20 @@ FtpConnection.prototype._command_MKD = function(pathRequest) {
 };
 
 // Perform a no-op (used to keep-alive connection)
-FtpConnection.prototype._command_NOOP = function() {
+FtpConnection.prototype._command_NOOP = function () {
   this.respond('200 OK');
   return this;
 };
 
-FtpConnection.prototype._command_PORT = function(x, y) {
+FtpConnection.prototype._command_PORT = function (x, y) {
   this._PORT(x, y);
 };
 
-FtpConnection.prototype._command_EPRT = function(x, y) {
+FtpConnection.prototype._command_EPRT = function (x, y) {
   this._PORT(x, y);
 };
 
-FtpConnection.prototype._PORT = function(commandArg, command) {
+FtpConnection.prototype._PORT = function (commandArg, command) {
   var self = this;
   var m;
   var host;
@@ -686,7 +690,7 @@ FtpConnection.prototype._PORT = function(commandArg, command) {
     }
   } else { // EPRT
     if (commandArg.length >= 3 && commandArg.charAt(0) === '|' &&
-        commandArg.charAt(2) === '|' && commandArg.charAt(1) === '2') {
+      commandArg.charAt(2) === '|' && commandArg.charAt(1) === '2') {
       // Only IPv4 is supported.
       self.respond('522 Server cannot handle IPv6 EPRT commands, use (1)');
       return;
@@ -720,15 +724,15 @@ FtpConnection.prototype._PORT = function(commandArg, command) {
   self.respond('200 OK');
 };
 
-FtpConnection.prototype._command_PASV = function(x, y) {
+FtpConnection.prototype._command_PASV = function (x, y) {
   this._PASV(x, y);
 };
 
-FtpConnection.prototype._command_EPSV = function(x, y) {
+FtpConnection.prototype._command_EPSV = function (x, y) {
   this._PASV(x, y);
 };
 
-FtpConnection.prototype._PASV = function(commandArg, command) {
+FtpConnection.prototype._PASV = function (commandArg, command) {
   var self = this;
 
   self.dataConfigured = false;
@@ -754,7 +758,7 @@ FtpConnection.prototype._PASV = function(commandArg, command) {
   self.dataConfigured = true;
 };
 
-FtpConnection.prototype._writePASVReady = function(command) {
+FtpConnection.prototype._writePASVReady = function (command) {
   var self = this;
 
   var a = self.pasv.address();
@@ -769,7 +773,7 @@ FtpConnection.prototype._writePASVReady = function(command) {
   }
 };
 
-FtpConnection.prototype._setupNewPASV = function(commandArg, command) {
+FtpConnection.prototype._setupNewPASV = function (commandArg, command) {
   var self = this;
 
   var pasv = self._createPassiveServer();
@@ -791,7 +795,7 @@ FtpConnection.prototype._setupNewPASV = function(commandArg, command) {
     //     (iii) We run out of ports to try.
     var i = self.server.options.pasvPortRangeStart;
     pasv.listen(i);
-    portRangeErrorHandler = function(e) {
+    portRangeErrorHandler = function (e) {
       if (e.code === 'EADDRINUSE' && i < self.server.options.pasvPortRangeEnd) {
         pasv.listen(++i);
       } else {
@@ -806,7 +810,7 @@ FtpConnection.prototype._setupNewPASV = function(commandArg, command) {
   }
 
   // Once we're successfully listening, tell the client
-  pasv.on('listening', function() {
+  pasv.on('listening', function () {
     self.pasv = pasv;
 
     if (portRangeErrorHandler) {
@@ -821,14 +825,14 @@ FtpConnection.prototype._setupNewPASV = function(commandArg, command) {
     self._logIf(LOG.DEBUG, 'Passive data connection listening on port ' + port);
     self._writePASVReady(command);
   });
-  pasv.on('close', function() {
+  pasv.on('close', function () {
     self.pasv = null;
     self.dataListener = null;
     self._logIf(LOG.DEBUG, 'Passive data listener closed');
   });
 };
 
-FtpConnection.prototype._command_PBSZ = function(commandArg) {
+FtpConnection.prototype._command_PBSZ = function (commandArg) {
   var self = this;
 
   if (!self.server.options.tlsOptions) {
@@ -851,7 +855,7 @@ FtpConnection.prototype._command_PBSZ = function(commandArg) {
   }
 };
 
-FtpConnection.prototype._command_PROT = function(commandArg) {
+FtpConnection.prototype._command_PROT = function (commandArg) {
   var self = this;
 
   if (!self.server.options.tlsOptions) {
@@ -871,7 +875,7 @@ FtpConnection.prototype._command_PROT = function(commandArg) {
 };
 
 // Print the current working directory.
-FtpConnection.prototype._command_PWD = function(commandArg) {
+FtpConnection.prototype._command_PWD = function (commandArg) {
   var pathEscaped = pathEscape(this.cwd);
   if (commandArg === '') {
     this.respond('257 "' + pathEscaped + '" is current directory');
@@ -881,11 +885,11 @@ FtpConnection.prototype._command_PWD = function(commandArg) {
   return this;
 };
 
-FtpConnection.prototype._command_QUIT = function() {
+FtpConnection.prototype._command_QUIT = function () {
   var self = this;
 
   self.hasQuit = true;
-  self.respond('221 Goodbye', function(err) {
+  self.respond('221 Goodbye', function (err) {
     if (err) {
       self._logIf(LOG.ERROR, "Error writing 'Goodbye' message following QUIT");
     }
@@ -894,17 +898,41 @@ FtpConnection.prototype._command_QUIT = function() {
   });
 };
 
-FtpConnection.prototype._command_RETR = function(commandArg) {
+FtpConnection.prototype._command_RETR = function (commandArg) {
   var filename = pathModule.join(this.root, withCwd(this.cwd, commandArg));
 
   if (this.server.options.useReadFile) {
     this._RETR_usingReadFile(commandArg, filename);
   } else {
-    this._RETR_usingCreateReadStream(commandArg, filename);
+    // this._RETR_usingCreateReadStream(commandArg, filename);
+    this._RETR_usingCreateMongoStream(commandArg, filename);
   }
 };
 
-FtpConnection.prototype._RETR_usingCreateReadStream = function(commandArg, filename) {
+FtpConnection.prototype._RETR_usingCreateMongoStream = function (commandArg, filename) {
+  var self = this;
+  var startTime = new Date();
+  const options = ({ filename: filename.split("/").pop() });
+  const Attachment = gridfs.createModel();
+  self.emit('file:retr', 'open', {
+    user: self.username,
+    file: filename,
+    sTime: startTime,
+  });
+  function afterOk(callback) {
+    self.respond('150 Opening ' + self.mode.toUpperCase() + ' mode data connection', callback);
+  }
+  afterOk(function () {
+    self._whenDataReady(function (pasvconn) {
+      const readStream = Attachment.read(options);
+      readStream.pipe(pasvconn);
+      readStream.resume();
+      self.respond('226 Closing data connection');
+    });
+  });
+}
+
+FtpConnection.prototype._RETR_usingCreateReadStream = function (commandArg, filename) {
   var self = this;
   var startTime = new Date();
 
@@ -919,7 +947,7 @@ FtpConnection.prototype._RETR_usingCreateReadStream = function(commandArg, filen
   }
 
 
-  self.fs.open(filename, 'r', function(err, fd) {
+  self.fs.open(filename, 'r', function (err, fd) {
     if (err) {
       self.emit('file:retr', 'error', {
         user: self.username,
@@ -938,13 +966,13 @@ FtpConnection.prototype._RETR_usingCreateReadStream = function(commandArg, filen
         self._logIf(LOG.ERROR, "Error at read of '" + filename + "' other than ENOENT " + err);
       }
     } else {
-      afterOk(function() {
-        self._whenDataReady(function(pasvconn) {
+      afterOk(function () {
+        self._whenDataReady(function (pasvconn) {
           var readLength = 0;
           var now = new Date();
-          var rs = self.fs.createReadStream(null, {fd: fd});
+          var rs = self.fs.createReadStream(null, { fd: fd });
           rs.pause();
-          rs.once('error', function(err) {
+          rs.once('error', function (err) {
             self.emit('file:retr', 'close', {
               user: self.username,
               file: filename,
@@ -959,11 +987,11 @@ FtpConnection.prototype._RETR_usingCreateReadStream = function(commandArg, filen
             });
           });
 
-          rs.on('data', function(buffer) {
+          rs.on('data', function (buffer) {
             readLength += buffer.length;
           });
 
-          rs.on('end', function() {
+          rs.on('end', function () {
             var now = new Date();
             self.emit('file:retr', 'close', {
               user: self.username,
@@ -987,7 +1015,7 @@ FtpConnection.prototype._RETR_usingCreateReadStream = function(commandArg, filen
   });
 };
 
-FtpConnection.prototype._RETR_usingReadFile = function(commandArg, filename) {
+FtpConnection.prototype._RETR_usingReadFile = function (commandArg, filename) {
   var self = this;
   var startTime = new Date();
 
@@ -1001,7 +1029,7 @@ FtpConnection.prototype._RETR_usingReadFile = function(commandArg, filename) {
     self.respond('150 Opening ' + self.mode.toUpperCase() + ' mode data connection', callback);
   }
 
-  self.fs.readFile(filename, function(err, contents) {
+  self.fs.readFile(filename, function (err, contents) {
     if (err) {
       self.emit('file:retr', 'error', {
         user: self.username,
@@ -1022,9 +1050,9 @@ FtpConnection.prototype._RETR_usingReadFile = function(commandArg, filename) {
         self._logIf(LOG.ERROR, "Error at read of '" + filename + "' other than ENOENT " + err);
       }
     } else {
-      afterOk(function() {
-        self._whenDataReady(function(pasvconn) {
-          contents = {filename: filename, data: contents};
+      afterOk(function () {
+        self._whenDataReady(function (pasvconn) {
+          contents = { filename: filename, data: contents };
           self.emit('file:retr:contents', contents);
           contents = contents.data;
           pasvconn.write(contents);
@@ -1049,10 +1077,10 @@ FtpConnection.prototype._RETR_usingReadFile = function(commandArg, filename) {
 };
 
 // Remove a directory
-FtpConnection.prototype._command_RMD = function(pathRequest) {
+FtpConnection.prototype._command_RMD = function (pathRequest) {
   var pathServer = withCwd(this.cwd, pathRequest);
   var pathFs = pathModule.join(this.root, pathServer);
-  this.fs.rmdir(pathFs, function(err) {
+  this.fs.rmdir(pathFs, function (err) {
     if (err) {
       this._logIf(LOG.ERROR, 'RMD ' + pathRequest + ': ' + err);
       this.respond('550 Delete operation failed');
@@ -1063,17 +1091,17 @@ FtpConnection.prototype._command_RMD = function(pathRequest) {
   return this;
 };
 
-FtpConnection.prototype._command_RNFR = function(commandArg) {
+FtpConnection.prototype._command_RNFR = function (commandArg) {
   var self = this;
   self.filefrom = withCwd(self.cwd, commandArg);
   self._logIf(LOG.DEBUG, 'Rename from ' + self.filefrom);
   self.respond('350 Ready for destination name');
 };
 
-FtpConnection.prototype._command_RNTO = function(commandArg) {
+FtpConnection.prototype._command_RNTO = function (commandArg) {
   var self = this;
   var fileto = withCwd(self.cwd, commandArg);
-  self.fs.rename(pathModule.join(self.root, self.filefrom), pathModule.join(self.root, fileto), function(err) {
+  self.fs.rename(pathModule.join(self.root, self.filefrom), pathModule.join(self.root, fileto), function (err) {
     if (err) {
       self._logIf(LOG.ERROR, 'Error renaming file from ' + self.filefrom + ' to ' + fileto);
       self.respond('550 Rename failed' + (err.code === 'ENOENT' ? '; file does not exist' : ''));
@@ -1083,11 +1111,11 @@ FtpConnection.prototype._command_RNTO = function(commandArg) {
   });
 };
 
-FtpConnection.prototype._command_SIZE = function(commandArg) {
+FtpConnection.prototype._command_SIZE = function (commandArg) {
   var self = this;
 
   var filename = withCwd(self.cwd, commandArg);
-  self.fs.stat(pathModule.join(self.root, filename), function(err, s) {
+  self.fs.stat(pathModule.join(self.root, filename), function (err, s) {
     if (err) {
       self._logIf(LOG.ERROR, "Error getting size of file '" + filename + "' ");
       self.respond('450 Failed to get size of file');
@@ -1097,7 +1125,7 @@ FtpConnection.prototype._command_SIZE = function(commandArg) {
   });
 };
 
-FtpConnection.prototype._command_TYPE = function(commandArg) {
+FtpConnection.prototype._command_TYPE = function (commandArg) {
   if (commandArg === 'I' || commandArg === 'A') {
     this.respond('200 OK');
   } else {
@@ -1105,25 +1133,43 @@ FtpConnection.prototype._command_TYPE = function(commandArg) {
   }
 };
 
-FtpConnection.prototype._command_SYST = function() {
+FtpConnection.prototype._command_SYST = function () {
   this.respond('215 UNIX Type: I');
 };
 
-FtpConnection.prototype._command_STOR = function(commandArg) {
+FtpConnection.prototype._command_STOR = function (commandArg) {
   var filename = withCwd(this.cwd, commandArg);
-
   if (this.server.options.useWriteFile) {
     this._STOR_usingWriteFile(filename, 'w');
   } else {
-    this._STOR_usingCreateWriteStream(filename, null, 'w');
+    // this._STOR_usingCreateWriteStream(filename, null, 'w');
+    this._STOR_usingCreateMongoStream(filename, null, 'w');
   }
 };
 
+const gridfs = require('mongoose-gridfs');
+
 // 'initialBuffers' argument is set when this is called from _STOR_usingWriteFile.
-FtpConnection.prototype._STOR_usingCreateWriteStream = function(filename, initialBuffers, flag) {
+FtpConnection.prototype._STOR_usingCreateMongoStream = function (filename, initialBuffers, flag) {
   var self = this;
+  self._whenDataReady(handleUpload);
+  function handleUpload(dataSocket) {
+    const options = ({ filename: filename.split("/").pop() });
+    const Attachment = gridfs.createModel();
+    Attachment.write(options, dataSocket, (error, file) => {
+      if (error) {
+        self.respond('426 Connection closed; transfer aborted');
+      } else {
+        self.respond('150 Ok to send data');
+      }
+    });
+  }
+};
 
-  var wStreamFlags = {flags: flag || 'w', mode: 0644};
+// 'initialBuffers' argument is set when this is called from _STOR_usingWriteFile.
+FtpConnection.prototype._STOR_usingCreateWriteStream = function (filename, initialBuffers, flag) {
+  var self = this;
+  var wStreamFlags = { flags: flag || 'w', mode: 0644 };
   var storeStream = self.fs.createWriteStream(pathModule.join(self.root, filename), wStreamFlags);
   var notErr = true;
   // Adding for event metadata for file upload (STOR)
@@ -1131,14 +1177,15 @@ FtpConnection.prototype._STOR_usingCreateWriteStream = function(filename, initia
 
   if (initialBuffers) {
     //todo: handle back-pressure
-    initialBuffers.forEach(function(b) {
+    console.log(initialBuffers)
+    initialBuffers.forEach(function (b) {
       storeStream.write(b);
     });
   }
 
   self._whenDataReady(handleUpload);
 
-  storeStream.on('open', function() {
+  storeStream.on('open', function () {
     self._logIf(LOG.DEBUG, 'File opened/created: ' + filename);
     self._logIf(LOG.DEBUG, 'Told client ok to send file data');
     // Adding event emitter for upload start time
@@ -1151,7 +1198,7 @@ FtpConnection.prototype._STOR_usingCreateWriteStream = function(filename, initia
     self.respond('150 Ok to send data');
   });
 
-  storeStream.on('error', function() {
+  storeStream.on('error', function () {
     self.emit('file:stor', 'error', {
       user: self.username,
       file: filename,
@@ -1171,7 +1218,7 @@ FtpConnection.prototype._STOR_usingCreateWriteStream = function(filename, initia
     self.respond('426 Connection closed; transfer aborted');
   });
 
-  storeStream.on('finish', function() {
+  storeStream.on('finish', function () {
     // Adding event emitter for completed upload.
     self.emit('file:stor', 'close', {
       user: self.username,
@@ -1191,15 +1238,16 @@ FtpConnection.prototype._STOR_usingCreateWriteStream = function(filename, initia
   });
 
   function handleUpload(dataSocket) {
+    console.log(dataSocket instanceof Readable)
     dataSocket.pipe(storeStream);
-    dataSocket.on('error', function(err) {
+    dataSocket.on('error', function (err) {
       notErr = false;
       self._logIf(LOG.ERROR, 'Data connection error: ' + util.inspect(err));
     });
   }
 };
 
-FtpConnection.prototype._STOR_usingWriteFile = function(filename, flag) {
+FtpConnection.prototype._STOR_usingWriteFile = function (filename, flag) {
   var self = this;
 
   var erroredOut = false;
@@ -1213,7 +1261,7 @@ FtpConnection.prototype._STOR_usingWriteFile = function(filename, flag) {
     time: startTime,
   });
 
-  self.respond('150 Ok to send data', function() {
+  self.respond('150 Ok to send data', function () {
     self._whenDataReady(handleUpload);
   });
 
@@ -1225,7 +1273,7 @@ FtpConnection.prototype._STOR_usingWriteFile = function(filename, flag) {
 
   function dataHandler(buf) {
     if (self.server.options.uploadMaxSlurpSize != null &&
-        totalBytes + buf.length > self.server.options.uploadMaxSlurpSize) {
+      totalBytes + buf.length > self.server.options.uploadMaxSlurpSize) {
       // Give up trying to slurp it -- it's too big.
 
       // If the 'fs' module we've been given doesn't implement 'createWriteStream', then
@@ -1266,10 +1314,10 @@ FtpConnection.prototype._STOR_usingWriteFile = function(filename, flag) {
       return;
     }
 
-    var wOptions = {flag: flag || 'w', mode: 0644};
-    var contents = {filename: filename, data: slurpBuf.slice(0, totalBytes)};
+    var wOptions = { flag: flag || 'w', mode: 0644 };
+    var contents = { filename: filename, data: slurpBuf.slice(0, totalBytes) };
     self.emit('file:stor:contents', contents);
-    self.fs.writeFile(pathModule.join(self.root, filename), contents.data, wOptions, function(err) {
+    self.fs.writeFile(pathModule.join(self.root, filename), contents.data, wOptions, function (err) {
       self.emit('file:stor', 'close', {
         user: self.username,
         file: filename,
@@ -1303,7 +1351,7 @@ FtpConnection.prototype._STOR_usingWriteFile = function(filename, flag) {
   }
 };
 
-FtpConnection.prototype._command_APPE = function(commandArg) {
+FtpConnection.prototype._command_APPE = function (commandArg) {
   var filename = withCwd(this.cwd, commandArg);
 
   if (this.server.options.useWriteFile) {
@@ -1314,7 +1362,7 @@ FtpConnection.prototype._command_APPE = function(commandArg) {
 };
 
 // Specify a username for login
-FtpConnection.prototype._command_USER = function(username) {
+FtpConnection.prototype._command_USER = function (username) {
   var self = this;
 
   if (self.server.options.tlsOnly && !self.secure) {
@@ -1324,75 +1372,75 @@ FtpConnection.prototype._command_USER = function(username) {
       'connect using FTP-SSL with explicit AUTH TLS');
   } else {
     self.emit('command:user', username,
-        function success() {
-          self.respond('331 User name okay, need password.');
-        },
-        function failure() {
-          self.respond('530 Not logged in.');
-        }
+      function success() {
+        self.respond('331 User name okay, need password.');
+      },
+      function failure() {
+        self.respond('530 Not logged in.');
+      }
     );
   }
   return this;
 };
 
 // Specify a password for login
-FtpConnection.prototype._command_PASS = function(password) {
+FtpConnection.prototype._command_PASS = function (password) {
   var self = this;
 
   if (self.previousCommand !== 'USER') {
     self.respond('503 Bad sequence of commands.');
   } else {
     self.emit('command:pass', password,
-        function success(username, userFsModule) {
-          function panic(error, method) {
-            self._logIf(LOG.ERROR, method + ' signaled error ' + util.inspect(error));
-            self.respond('421 Service not available, closing control connection.', function() {
-              self._closeSocket(self.socket, true);
-            });
+      function success(username, userFsModule) {
+        function panic(error, method) {
+          self._logIf(LOG.ERROR, method + ' signaled error ' + util.inspect(error));
+          self.respond('421 Service not available, closing control connection.', function () {
+            self._closeSocket(self.socket, true);
+          });
+        }
+        function setCwd(cwd) {
+          function setRoot(root) {
+            self.root = root;
+            self.respond('230 User logged in, proceed.');
           }
-          function setCwd(cwd) {
-            function setRoot(root) {
-              self.root = root;
-              self.respond('230 User logged in, proceed.');
-            }
 
-            self.cwd = cwd;
-            if (self.server.getRoot.length <= 1) {
-              setRoot(self.server.getRoot(self));
-            } else {
-              self.server.getRoot(self, function(err, root) {
-                if (err) {
-                  panic(err, 'getRoot');
-                } else {
-                  setRoot(root);
-                }
-              });
-            }
-          }
-          self.username = username;
-          self.fs = userFsModule || fsModule;
-          if (self.server.getInitialCwd.length <= 1) {
-            setCwd(withCwd(self.server.getInitialCwd(self)));
+          self.cwd = cwd;
+          if (self.server.getRoot.length <= 1) {
+            setRoot(self.server.getRoot(self));
           } else {
-            self.server.getInitialCwd(self, function(err, cwd) {
+            self.server.getRoot(self, function (err, root) {
               if (err) {
-                panic(err, 'getInitialCwd');
+                panic(err, 'getRoot');
               } else {
-                setCwd(withCwd(cwd));
+                setRoot(root);
               }
             });
           }
-        },
-        function failure() {
-          self.respond('530 Not logged in.');
-          self.username = null;
         }
+        self.username = username;
+        self.fs = userFsModule || fsModule;
+        if (self.server.getInitialCwd.length <= 1) {
+          setCwd(withCwd(self.server.getInitialCwd(self)));
+        } else {
+          self.server.getInitialCwd(self, function (err, cwd) {
+            if (err) {
+              panic(err, 'getInitialCwd');
+            } else {
+              setCwd(withCwd(cwd));
+            }
+          });
+        }
+      },
+      function failure() {
+        self.respond('530 Not logged in.');
+        self.username = null;
+      }
     );
   }
   return this;
 };
 
-FtpConnection.prototype._closeSocket = function(socket, shouldDestroy) {
+FtpConnection.prototype._closeSocket = function (socket, shouldDestroy) {
   // TODO: Should we always use destroy() to avoid keeping sockets open longer
   // than necessary (and possibly exceeding OS max open sockets)?
   if (shouldDestroy || this.server.options.destroySockets) {
diff --git a/node_modules/ftpd/lib/FtptoMongoConnection.js b/node_modules/ftpd/lib/FtptoMongoConnection.js
new file mode 100644
index 0000000..8235700
--- /dev/null
+++ b/node_modules/ftpd/lib/FtptoMongoConnection.js
@@ -0,0 +1,18 @@
+const gridfs = require('mongoose-gridfs');
+
+// 'initialBuffers' argument is set when this is called from _STOR_usingWriteFile.
+FtpConnection.prototype._STOR_usingCreateMongoStream = function (filename, initialBuffers, flag) {
+    var self = this;
+    self._whenDataReady(handleUpload);
+    function handleUpload(dataSocket) {
+        const options = ({ filename: filename.split("/").pop() });
+        const Attachment = gridfs.createModel();
+        Attachment.write(options, dataSocket, (error, file) => {
+            if (error) {
+                self.respond('426 Connection closed; transfer aborted');
+            } else {
+                self.respond('150 Ok to send data');
+            }
+        });
+    }
+};
diff --git a/node_modules/ftpd/lib/glob.js b/node_modules/ftpd/lib/glob.js
index e6805aa..6385bfa 100644
--- a/node_modules/ftpd/lib/glob.js
+++ b/node_modules/ftpd/lib/glob.js
@@ -1,4 +1,6 @@
 var PathModule = require('path');
+const FileModel = require('../../../models/File');
+
 
 var CONC = 5;
 function setMaxStatsAtOnce(n) {
@@ -225,6 +227,29 @@ function glob(path, fsm, callback, noWildcards) {
   }
 }
 
+function mongoglob(path, fsm, callback, noWildcards) {
+  FileModel.find({}, (err, result)=> {
+    if(err){
+      return callback(err)
+    }
+    const mongostat = result.map((json) => {
+      return {
+        name: json.filename,
+        stats: {
+          mode: parseInt("100666", 8),
+          uid: 501,
+          gid: 20,
+          size: json.length,
+          mtime: json.uploadDate
+        }
+      }
+    })
+    return callback(null, mongostat)
+  });
+}
+
+
 exports.glob = glob;
+exports.mongoglob = mongoglob
 exports.matchPattern = matchPattern;
 exports.setMaxStatsAtOnce = setMaxStatsAtOnce;
diff --git a/node_modules/ftpd/lib/helpers/withCwd.js b/node_modules/ftpd/lib/helpers/withCwd.js
index 3eed41c..ce69d7a 100644
--- a/node_modules/ftpd/lib/helpers/withCwd.js
+++ b/node_modules/ftpd/lib/helpers/withCwd.js
@@ -1,6 +1,10 @@
 var pathModule = require('path');
 
 function withCwd(cwd, path) {
+  // console.log("cwd:" + cwd)
+  // /x:Documents
+  // console.log("path:" + path)
+  // 空
   var firstChar = (path || '').charAt(0);
   cwd = cwd || pathModule.sep;
   path = path || '';
@@ -8,6 +12,8 @@ function withCwd(cwd, path) {
     cwd = pathModule.sep;
   }
   path = pathModule.join(pathModule.sep, cwd, path);
+  // console.log("returnpath:" + path)
+  // /x:Documents
   return path;
 }
 
